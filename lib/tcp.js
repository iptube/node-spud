(function() {
  var Manager, TcpFlags, URI_TCP, caps, crypto, m, utils;

  caps = require('./caps');

  Manager = require('./manager');

  utils = require('./utils');

  crypto = require('crypto');

  TcpFlags = this.TcpFlags = (function() {
    function TcpFlags() {}

    TcpFlags.FIN = 1;

    TcpFlags.SYN = 2;

    TcpFlags.RST = 4;

    TcpFlags.PSH = 8;

    TcpFlags.ACK = 16;

    TcpFlags.URG = 32;

    return TcpFlags;

  })();

  URI_TCP = 'tag:cursive.net,2015:tcp';

  this.connect = this.createConnection = function(manager, options, cb) {
    return new this.Tcp(manager, options).connect(options, cb);
  };

  this.Tcp = (function() {
    function Tcp(manager1, options1) {
      this.manager = manager1;
      this.options = options1;
      this.tubes = [];
      this.options.caps = caps.combine(this.options.caps, URI_TCP);
    }

    Tcp.prototype.connect = function(options, cb) {
      var t;
      this.options = utils.extend(this.options, options);
      t = this.manager.add(this.options);
      this.tubes.push(t);
      this.manager.on('running', cb);
      t.open({
        data: {
          seq: crypto.randomBytes(4).readUInt32BE(),
          ack: 0,
          flags: TcpFlags.SYN
        }
      });
      return this;
    };

    return Tcp;

  })();

  m = new Manager;

  this.connect(m, {
    address: 'localhost',
    port: 1402
  }, function() {
    return console.log('connect');
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRjcC5jb2ZmZWUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQSxNQUFBOztFQUFBLElBQUEsR0FBTyxPQUFBLENBQVEsUUFBUjs7RUFDUCxPQUFBLEdBQVUsT0FBQSxDQUFRLFdBQVI7O0VBQ1YsS0FBQSxHQUFRLE9BQUEsQ0FBUSxTQUFSOztFQUNSLE1BQUEsR0FBUyxPQUFBLENBQVEsUUFBUjs7RUFFVCxRQUFBLEdBQWlCLElBQUMsQ0FBQTs7O0lBQ2hCLFFBQUMsQ0FBQSxHQUFELEdBQU87O0lBQ1AsUUFBQyxDQUFBLEdBQUQsR0FBTzs7SUFDUCxRQUFDLENBQUEsR0FBRCxHQUFPOztJQUNQLFFBQUMsQ0FBQSxHQUFELEdBQU87O0lBQ1AsUUFBQyxDQUFBLEdBQUQsR0FBTTs7SUFDTixRQUFDLENBQUEsR0FBRCxHQUFNOzs7Ozs7RUFFUixPQUFBLEdBQVU7O0VBRVYsSUFBQyxDQUFBLE9BQUQsR0FBVyxJQUFDLENBQUEsZ0JBQUQsR0FBb0IsU0FBQyxPQUFELEVBQVUsT0FBVixFQUFtQixFQUFuQjtXQUN6QixJQUFBLElBQUMsQ0FBQSxHQUFELENBQUssT0FBTCxFQUFjLE9BQWQsQ0FDRixDQUFDLE9BREMsQ0FDTyxPQURQLEVBQ2dCLEVBRGhCO0VBRHlCOztFQUl6QixJQUFDLENBQUE7SUFDUSxhQUFDLFFBQUQsRUFBVyxRQUFYO01BQUMsSUFBQyxDQUFBLFVBQUQ7TUFBVSxJQUFDLENBQUEsVUFBRDtNQUd0QixJQUFDLENBQUEsS0FBRCxHQUFTO01BQ1QsSUFBQyxDQUFBLE9BQU8sQ0FBQyxJQUFULEdBQWdCLElBQUksQ0FBQyxPQUFMLENBQWEsSUFBQyxDQUFBLE9BQU8sQ0FBQyxJQUF0QixFQUE0QixPQUE1QjtJQUpMOztrQkFNYixPQUFBLEdBQVMsU0FBQyxPQUFELEVBQVUsRUFBVjtBQUNQLFVBQUE7TUFBQSxJQUFDLENBQUEsT0FBRCxHQUFXLEtBQUssQ0FBQyxNQUFOLENBQWEsSUFBQyxDQUFBLE9BQWQsRUFBdUIsT0FBdkI7TUFDWCxDQUFBLEdBQUksSUFBQyxDQUFBLE9BQU8sQ0FBQyxHQUFULENBQWEsSUFBQyxDQUFBLE9BQWQ7TUFDSixJQUFDLENBQUEsS0FBSyxDQUFDLElBQVAsQ0FBWSxDQUFaO01BQ0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxFQUFULENBQVksU0FBWixFQUF1QixFQUF2QjtNQUNBLENBQUMsQ0FBQyxJQUFGLENBQ0U7UUFBQSxJQUFBLEVBQ0U7VUFBQSxHQUFBLEVBQUssTUFBTSxDQUFDLFdBQVAsQ0FBbUIsQ0FBbkIsQ0FBcUIsQ0FBQyxZQUF0QixDQUFBLENBQUw7VUFDQSxHQUFBLEVBQUssQ0FETDtVQUVBLEtBQUEsRUFBTyxRQUFRLENBQUMsR0FGaEI7U0FERjtPQURGO2FBS0E7SUFWTzs7Ozs7O0VBWVgsQ0FBQSxHQUFJLElBQUk7O0VBQ1IsSUFBQyxDQUFBLE9BQUQsQ0FBUyxDQUFULEVBQ0U7SUFBQSxPQUFBLEVBQVMsV0FBVDtJQUNBLElBQUEsRUFBTSxJQUROO0dBREYsRUFHRSxTQUFBO1dBQ0EsT0FBTyxDQUFDLEdBQVIsQ0FBWSxTQUFaO0VBREEsQ0FIRjtBQXZDQSIsImZpbGUiOiJ0Y3AuanMiLCJzb3VyY2VSb290IjoiL3NvdXJjZS8iLCJzb3VyY2VzQ29udGVudCI6WyJjYXBzID0gcmVxdWlyZSAnLi9jYXBzJ1xuTWFuYWdlciA9IHJlcXVpcmUgJy4vbWFuYWdlcidcbnV0aWxzID0gcmVxdWlyZSAnLi91dGlscydcbmNyeXB0byA9IHJlcXVpcmUgJ2NyeXB0bydcblxuVGNwRmxhZ3MgPSBjbGFzcyBAVGNwRmxhZ3NcbiAgQEZJTjogIDFcbiAgQFNZTjogIDJcbiAgQFJTVDogIDRcbiAgQFBTSDogIDhcbiAgQEFDSzogMTZcbiAgQFVSRzogMzJcblxuVVJJX1RDUCA9ICd0YWc6Y3Vyc2l2ZS5uZXQsMjAxNTp0Y3AnXG5cbkBjb25uZWN0ID0gQGNyZWF0ZUNvbm5lY3Rpb24gPSAobWFuYWdlciwgb3B0aW9ucywgY2IpIC0+XG4gIG5ldyBAVGNwIG1hbmFnZXIsIG9wdGlvbnNcbiAgICAuY29ubmVjdCBvcHRpb25zLCBjYlxuXG5jbGFzcyBAVGNwXG4gIGNvbnN0cnVjdG9yOiAoQG1hbmFnZXIsIEBvcHRpb25zKSAtPlxuICAgICMgd2UncmUgbGlrZWx5IHRvIGV2ZW50dWFsbHkgaGF2ZSBtdWx0aXBsZSB0dWJlcywgb25jZSB3ZSBkZWFsIHdpdGhcbiAgICAjIGludGVyZmFjZSBjaGFuZ2VzIGFuZCBtdWx0aS1wYXRoLlxuICAgIEB0dWJlcyA9IFtdXG4gICAgQG9wdGlvbnMuY2FwcyA9IGNhcHMuY29tYmluZSBAb3B0aW9ucy5jYXBzLCBVUklfVENQXG5cbiAgY29ubmVjdDogKG9wdGlvbnMsIGNiKSAtPlxuICAgIEBvcHRpb25zID0gdXRpbHMuZXh0ZW5kIEBvcHRpb25zLCBvcHRpb25zXG4gICAgdCA9IEBtYW5hZ2VyLmFkZCBAb3B0aW9uc1xuICAgIEB0dWJlcy5wdXNoIHRcbiAgICBAbWFuYWdlci5vbiAncnVubmluZycsIGNiXG4gICAgdC5vcGVuXG4gICAgICBkYXRhOlxuICAgICAgICBzZXE6IGNyeXB0by5yYW5kb21CeXRlcyg0KS5yZWFkVUludDMyQkUoKVxuICAgICAgICBhY2s6IDBcbiAgICAgICAgZmxhZ3M6IFRjcEZsYWdzLlNZTlxuICAgIEBcblxubSA9IG5ldyBNYW5hZ2VyXG5AY29ubmVjdCBtLFxuICBhZGRyZXNzOiAnbG9jYWxob3N0J1xuICBwb3J0OiAxNDAyXG4sIC0+XG4gIGNvbnNvbGUubG9nICdjb25uZWN0J1xuIl19
