(function() {
  var COMMAND, DECL, MAGIC, NoFilter, SPUD_SIZE, SPUDpacket, cbor, error, ref, utils;

  try {
    require('source-map-support').install();
  } catch (error) {
    void 0;
  }

  cbor = require('cbor');

  NoFilter = require('nofilter');

  ref = require('./constants'), MAGIC = ref.MAGIC, COMMAND = ref.COMMAND, DECL = ref.DECL, SPUD_SIZE = ref.SPUD_SIZE;

  utils = require('./utils');

  module.exports = SPUDpacket = (function() {
    function SPUDpacket(props) {
      var ref1;
      this.key = (ref1 = props.key) != null ? ref1 : this.constructor.key(props.from || props.to, props.tube);
      this.magic = MAGIC;
      this.data = void 0;
      utils.extend(this, props);
    }

    SPUDpacket.key = function(rinfo, tid) {
      if ((rinfo == null) || (tid == null)) {
        throw new Error("Invalid key rinfo: '" + rinfo + "' tid: '" + tid + "'");
      }
      return rinfo.address + "|" + rinfo.port + "|" + (tid.toString('hex'));
    };

    SPUDpacket.parse = function(buf, rinfo) {
      var e, magic, misc, p;
      if (buf.length < SPUD_SIZE) {
        e = new Error("Invalid SPUD packet length: " + buf.inspect());
        return Promise.reject(e);
      }
      magic = buf.slice(0, 4);
      if (!MAGIC.equals(magic)) {
        e = new Error("Invalid magic number: " + (ret.magic.toString('hex')));
        return Promise.reject(e);
      }
      misc = buf.readUInt8(12);
      p = new SPUDpacket({
        tube: buf.slice(4, 12),
        cmd: misc & DECL.CMD,
        a2p: (misc & DECL.A2P) === DECL.A2P,
        p2a: (misc & DECL.P2A) === DECL.P2A,
        from: rinfo,
        buf: buf
      });
      if (buf.length > SPUD_SIZE) {
        return cbor.decodeFirst(buf.slice(SPUD_SIZE)).then(function(v) {
          p.data = v;
          return p;
        });
      } else {
        return Promise.resolve(p);
      }
    };

    SPUDpacket.prototype.toBuffer = function() {
      var nf;
      if (this.buf) {
        return this.buf;
      }
      nf = new NoFilter;
      nf.write(this.magic);
      nf.write(this.tube);
      nf.writeUInt8(this.cmd | ~~(this.a2p && DECL.A2P) | ~~(this.p2a && DECL.P2A));
      if (typeof this.data !== 'undefined') {
        nf.write(cbor.encode(this.data));
      }
      return this.buf = nf.slice();
    };

    SPUDpacket.prototype.reply = function(data) {
      return new SPUDpacket({
        to: this.from,
        magic: this.magic,
        tube: this.tube,
        a2p: this.p2a,
        p2a: this.a2p,
        cmd: (function() {
          switch (this.cmd) {
            case COMMAND.DATA:
              return COMMAND.DATA;
            case COMMAND.OPEN:
              return COMMAND.ACK;
            case COMMAND.CLOSE:
              return COMMAND.ACK;
            case COMMAND.ACK:
              throw new Error('Cannot reply to ack');
          }
        }).call(this),
        data: data
      });
    };

    return SPUDpacket;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,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RSxPQUFPLENBQUMsSUFGVjtxQkFFb0IsT0FBTyxDQUFDO0FBRjVCLGlCQUdFLE9BQU8sQ0FBQyxLQUhWO3FCQUdxQixPQUFPLENBQUM7QUFIN0IsaUJBSUUsT0FBTyxDQUFDLEdBSlY7QUFJbUIsb0JBQVUsSUFBQSxLQUFBLENBQU0scUJBQU47QUFKN0I7cUJBTEw7UUFVQSxJQUFBLEVBQU0sSUFWTjtPQURFO0lBREM7Ozs7O0FBekRUIiwiZmlsZSI6InBhY2tldC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbInRyeVxuICByZXF1aXJlKCdzb3VyY2UtbWFwLXN1cHBvcnQnKS5pbnN0YWxsKClcbmNhdGNoXG4gIHVuZGVmaW5lZFxuXG5jYm9yID0gcmVxdWlyZSAnY2Jvcidcbk5vRmlsdGVyID0gcmVxdWlyZSAnbm9maWx0ZXInXG57TUFHSUMsIENPTU1BTkQsIERFQ0wsIFNQVURfU0laRX0gPSByZXF1aXJlICcuL2NvbnN0YW50cydcbnV0aWxzID0gcmVxdWlyZSAnLi91dGlscydcblxubW9kdWxlLmV4cG9ydHMgPSBjbGFzcyBTUFVEcGFja2V0XG4gIGNvbnN0cnVjdG9yOiAocHJvcHMpIC0+XG4gICAgQGtleSA9IHByb3BzLmtleSA/IEBjb25zdHJ1Y3Rvci5rZXkoKHByb3BzLmZyb20gb3IgcHJvcHMudG8pLCBwcm9wcy50dWJlKVxuICAgIEBtYWdpYyA9IE1BR0lDXG4gICAgQGRhdGEgPSB1bmRlZmluZWRcbiAgICB1dGlscy5leHRlbmQgQCwgcHJvcHNcblxuICBAa2V5OiAocmluZm8sIHRpZCkgLT5cbiAgICBpZiAoIXJpbmZvPykgb3IgKCF0aWQ/KVxuICAgICAgdGhyb3cgbmV3IEVycm9yIFwiSW52YWxpZCBrZXkgcmluZm86ICcje3JpbmZvfScgdGlkOiAnI3t0aWR9J1wiXG4gICAgXCIje3JpbmZvLmFkZHJlc3N9fCN7cmluZm8ucG9ydH18I3t0aWQudG9TdHJpbmcoJ2hleCcpfVwiXG5cbiAgQHBhcnNlOiAoYnVmLCByaW5mbykgLT5cbiAgICBpZiBidWYubGVuZ3RoIDwgU1BVRF9TSVpFXG4gICAgICBlID0gbmV3IEVycm9yIFwiSW52YWxpZCBTUFVEIHBhY2tldCBsZW5ndGg6IFwiICsgYnVmLmluc3BlY3QoKVxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0IGVcbiAgICBtYWdpYyA9IGJ1Zi5zbGljZSgwLCA0KVxuICAgIGlmICFNQUdJQy5lcXVhbHMobWFnaWMpXG4gICAgICBlID0gbmV3IEVycm9yIFwiSW52YWxpZCBtYWdpYyBudW1iZXI6ICN7cmV0Lm1hZ2ljLnRvU3RyaW5nKCdoZXgnKX1cIlxuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0IGVcbiAgICBtaXNjID0gYnVmLnJlYWRVSW50OCgxMilcbiAgICBwID0gbmV3IFNQVURwYWNrZXRcbiAgICAgIHR1YmU6ICBidWYuc2xpY2UoNCwxMilcbiAgICAgIGNtZDogICBtaXNjICYgREVDTC5DTURcbiAgICAgIGEycDogICAobWlzYyAmIERFQ0wuQTJQKSA9PSBERUNMLkEyUFxuICAgICAgcDJhOiAgIChtaXNjICYgREVDTC5QMkEpID09IERFQ0wuUDJBXG4gICAgICBmcm9tOiAgcmluZm9cbiAgICAgIGJ1ZjogICBidWZcbiAgICBpZiBidWYubGVuZ3RoID4gU1BVRF9TSVpFXG4gICAgICBjYm9yLmRlY29kZUZpcnN0IGJ1Zi5zbGljZShTUFVEX1NJWkUpXG4gICAgICAudGhlbiAodikgLT5cbiAgICAgICAgcC5kYXRhID0gdlxuICAgICAgICBwXG4gICAgZWxzZVxuICAgICAgUHJvbWlzZS5yZXNvbHZlIHBcblxuICB0b0J1ZmZlcjogLT5cbiAgICBpZiBAYnVmXG4gICAgICByZXR1cm4gQGJ1ZlxuICAgIG5mID0gbmV3IE5vRmlsdGVyXG4gICAgbmYud3JpdGUgQG1hZ2ljXG4gICAgbmYud3JpdGUgQHR1YmVcbiAgICBuZi53cml0ZVVJbnQ4IEBjbWQgfCB+fihAYTJwIGFuZCBERUNMLkEyUCkgfCB+fihAcDJhIGFuZCBERUNMLlAyQSlcbiAgICBpZiB0eXBlb2YoQGRhdGEpICE9ICd1bmRlZmluZWQnXG4gICAgICBuZi53cml0ZSBjYm9yLmVuY29kZShAZGF0YSlcbiAgICBAYnVmID0gbmYuc2xpY2UoKVxuXG4gIHJlcGx5OiAoZGF0YSkgLT5cbiAgICBuZXcgU1BVRHBhY2tldFxuICAgICAgdG86ICAgIEBmcm9tXG4gICAgICBtYWdpYzogQG1hZ2ljXG4gICAgICB0dWJlOiAgQHR1YmVcbiAgICAgIGEycDogICBAcDJhXG4gICAgICBwMmE6ICAgQGEycFxuICAgICAgY21kOiBzd2l0Y2ggQGNtZFxuICAgICAgICB3aGVuIENPTU1BTkQuREFUQSB0aGVuIENPTU1BTkQuREFUQVxuICAgICAgICB3aGVuIENPTU1BTkQuT1BFTiB0aGVuIENPTU1BTkQuQUNLXG4gICAgICAgIHdoZW4gQ09NTUFORC5DTE9TRSB0aGVuIENPTU1BTkQuQUNLXG4gICAgICAgIHdoZW4gQ09NTUFORC5BQ0sgdGhlbiB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCByZXBseSB0byBhY2snKVxuICAgICAgZGF0YTogZGF0YVxuIl19
