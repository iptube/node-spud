(function() {
  var COMMAND, SPUDpacket, SPUDtube, STATES, TubeError, caps, crypto, utils,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    slice = [].slice;

  crypto = require('crypto');

  caps = require('./caps');

  SPUDpacket = require('./packet');

  utils = require('./utils');

  COMMAND = require('./constants').COMMAND;

  STATES = utils["enum"](['START', 'OPENING', 'RUNNING', 'CLOSING', 'CLOSED']);

  TubeError = (function(superClass) {
    extend(TubeError, superClass);

    function TubeError(tube, msg, packet) {
      this.packet = packet;
      Error.captureStackTrace(this, this.constructor);
      this.name = this.constructor.name;
      this.message = tube + ": " + msg;
      this.sent = 0;
      this.received = 0;
    }

    return TubeError;

  })(Error);

  module.exports = SPUDtube = (function() {
    function SPUDtube(manager, options) {
      this.manager = manager;
      this.options = options != null ? options : {};
      this.state = STATES.START;
      this.options.caps = caps.combine(this.options.caps);
      if (this.options.packet != null) {
        this.peer = this.options.packet.from;
        this.tube = this.options.packet.tube;
        this.key = this.options.packet.key;
      } else {
        this.peer = {
          address: this.options.address,
          port: this.options.port
        };
        this.tube = crypto.randomBytes(8);
        this.key = SPUDpacket.key(this.peer, this.tube);
      }
    }

    SPUDtube.prototype.toString = function() {
      return "<Tube " + (this.tube.toString('hex')) + ">";
    };

    SPUDtube.prototype.open = function(data) {
      var m;
      console.log('open');
      if (this.state !== STATES.START) {
        throw new Error('Invalid open state: ' + STATES[this.state]);
      }
      this.state = STATES.OPENING;
      m = new Map;
      if (data != null) {
        m.set(0, data);
      }
      if (this.options.caps) {
        m.set(1, caps.hash(this.options.caps));
      }
      return this.send(new SPUDpacket({
        cmd: COMMAND.OPEN,
        data: data,
        key: this.key
      }));
    };

    SPUDtube.prototype.close = function(data) {
      this.state = STATES.CLOSING;
      return this.send(new SPUDpacket({
        cmd: COMMAND.CLOSE,
        data: data,
        key: this.key
      }));
    };

    SPUDtube.prototype.send = function(pkt) {
      var data;
      this.sent++;
      if (!(pkt instanceof SPUDpacket)) {
        data = pkt;
        if (!(data instanceof Map)) {
          data = new Map;
          data.set(0, pkt);
        }
        pkt = new SPUDpacket({
          cmd: COMMAND.DATA,
          data: data,
          key: this.key
        });
      }
      pkt.tube = this.tube;
      return this.manager._send(this, pkt);
    };

    SPUDtube.prototype.emit = function() {
      var event, params, ref;
      event = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      return (ref = this.manager).emit.apply(ref, [event].concat(slice.call(params)));
    };

    SPUDtube.prototype.error = function(msg, pkt) {
      return this.emit('error', new TubeError(this, msg, pkt));
    };

    SPUDtube.prototype.recv = function(pkt) {
      this.received++;
      switch (this.state) {
        case STATES.START:
          this.state = STATES.RUNNING;
          return this.send(pkt.reply());
        case STATES.OPENING:
          if (pkt.cmd !== COMMAND.ACK) {
            return this.error('Ignoring non-ACK packet before ACK', pkt);
          }
          this.state = STATES.RUNNING;
          return this.emit('running', this);
        case STATES.RUNNING:
          switch (pkt.cmd) {
            case COMMAND.DATA:
              return this.emit('data', this, pkt);
            case COMMAND.CLOSE:
              this.state = STATES.CLOSED;
              this.send(pkt.reply());
              return this.manager.remove(this);
          }
          break;
        case STATES.CLOSING:
          switch (pkt.cmd) {
            case COMMAND.DATA:
              return this.emit('data', this, pkt);
            case COMMAND.CLOSE:
              this.state = STATES.CLOSED;
              this.send(pkt.reply());
              return this.manager.remove(this);
            case COMMAND.ACK:
              this.state = STATES.CLOSED;
              return this.manager.remove(this);
          }
      }
    };

    return SPUDtube;

  })();

}).call(this);

//# sourceMappingURL=data:application/json;base64,
